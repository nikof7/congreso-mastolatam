cat_tr_btau_sys = case_when(
tr_btau_sys == 0 ~ "0",
tr_btau_sys > 0 ~ "1"
),
cat_tr_btau_cam = case_when(
tr_btau_cam == 0 ~ "0",
tr_btau_cam > 0 ~ "1"
)
) %>%
select(site, system, camera, solar, sp, cat_n_tech_cam,cat_n_tech_sys,cat_tr_cfam_cam, cat_tr_cfam_sys, cat_tr_btau_cam,cat_tr_btau_sys)
head(data_categorized)
# Resumir las categorías para n_tech, tr_btau y tr_cfam
test <- data_categorized %>%
group_by(sp) %>%
summarise(across(starts_with("cat"),
list(Ausente = ~sum(. == "0"),
Presente = ~sum(. == "1"))))
head(test)
clipr::write_clip(test)
clipr::write_clip(test)
# Crear el dataframe con los datos proporcionados
overlap_data <- data.frame(
sp = c("1Aaxi", "1Mgou", "2Ctho", "2Lgym", "3Dnov", "3Dsep", "4Lgeo", "4Lwie"),
overlap_n_tech_Dhat = c(0.865, 0.872, 0.845, 0.847, 0.931, NA, 0.720, 0.831),
overlap_tr_cfam_Dhat = c(0.876, 0.844, 0.875, 0.862, 0.852, 0.715, 0.839, NA),
overlap_tr_btau_Dhat = c(0.809, 0.797, 0.867, 0.856, 0.916, 0.801, 0.716, 0.756)
)
# Mostrar el dataframe
print(overlap_data)
library(ggplot2)
# Convertir a formato largo para ggplot
overlap_long <- reshape2::melt(overlap_data, id.vars = "sp",
variable.name = "situation",
value.name = "overlap_value")
# Crear el boxplot
ggplot(overlap_long, aes(x = situation, y = overlap_value)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Comparación de los valores de overlap entre situaciones",
x = "Situación", y = "Valor de overlap")
# Crear gráficos para cada especie
library(ggplot2)
ggplot(overlap_long, aes(x = situation, y = overlap_value, group = sp, color = sp)) +
geom_boxplot() +
facet_wrap(~ sp) +
theme_minimal() +
labs(title = "Comparación de overlap por especie",
x = "Situación", y = "Valor de overlap")
ggplot(overlap_long, aes(x = situation, y = overlap_value, group = sp, color = sp)) +
geom_boxplot() +
facet_wrap(~ sp) +
theme_minimal() +
labs(title = "Comparación de overlap por especie",
x = "Situación", y = "Valor de overlap")
ggplot(overlap_long, aes(x = situation, y = overlap_value, group = sp, color = sp)) +
geom_boxplot()
ggplot(overlap_long, aes(x = situation, y = overlap_value, group = sp, color = sp)) +
geom_boxplot()
ggplot(overlap_long, aes(x = situation, y = overlap_value, group = sp, color = sp)) +
geom_boxplot() +
facet_wrap(~ sp)
overlap_data
overlap_long
ggplot(overlap_long, aes(x = situation, y = overlap_value, group = sp, color = sp)) +
geom_boxplot()
ggplot(overlap_long, aes(x = situation, y = overlap_value, group = sp, color = sp)) +
geom_boxplot() +
facet_wrap(~ sp)
overlap_data
overlap_data
ggplot(overlap_long, aes(x = situation, y = overlap_value, group = sp, color = sp)) +
geom_point()
# Crear el dataframe con los datos proporcionados
overlap_data <- data.frame(
sp = c("1Aaxi", "1Mgou", "2Ctho", "2Lgym", "3Dnov", "3Dsep", "4Lgeo", "4Lwie"),
overlap_n_tech_Dhat = c(0.865, 0.872, 0.845, 0.847, 0.931, 0, 0.720, 0.831),
overlap_tr_cfam_Dhat = c(0.876, 0.844, 0.875, 0.862, 0.852, 0.715, 0.839, 0),
overlap_tr_btau_Dhat = c(0.809, 0.797, 0.867, 0.856, 0.916, 0.801, 0.716, 0.756)
)
# Mostrar el dataframe
print(overlap_data)
library(ggplot2)
# Convertir a formato largo para ggplot
overlap_data <-
ggplot(overlap_long, aes(x = situation, y = overlap_value, group = sp, color = sp)) +
geom_point() +
facet_wrap(~ sp) +
theme_minimal() +
labs(title = "Comparación de overlap por especie",
x = "Situación", y = "Valor de overlap")
overlap_long <- reshape2::melt(overlap_data, id.vars = "sp",
variable.name = "situation",
value.name = "overlap_value")
overlap_long <- reshape2::melt(overlap_data, id.vars = "sp",
variable.name = "situation",
value.name = "overlap_value")
# Crear el dataframe con los datos proporcionados
overlap_data <- data.frame(
sp = c("1Aaxi", "1Mgou", "2Ctho", "2Lgym", "3Dnov", "3Dsep", "4Lgeo", "4Lwie"),
overlap_n_tech_Dhat = c(0.865, 0.872, 0.845, 0.847, 0.931, 0, 0.720, 0.831),
overlap_tr_cfam_Dhat = c(0.876, 0.844, 0.875, 0.862, 0.852, 0.715, 0.839, 0),
overlap_tr_btau_Dhat = c(0.809, 0.797, 0.867, 0.856, 0.916, 0.801, 0.716, 0.756)
)
# Mostrar el dataframe
print(overlap_data)
overlap_long <- reshape2::melt(overlap_data, id.vars = "sp",
variable.name = "situation",
value.name = "overlap_value")
ggplot(overlap_long, aes(x = situation, y = overlap_value, group = sp, color = sp)) +
geom_point() +
facet_wrap(~ sp) +
theme_minimal() +
labs(title = "Comparación de overlap por especie",
x = "Situación", y = "Valor de overlap")
ggplot(overlap_long, aes(x = situation, y = overlap_value)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Comparación de los valores de overlap entre situaciones",
x = "Situación", y = "Valor de overlap")
ggplot(overlap_long, aes(x = situation, y = overlap_value)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Comparación de los valores de overlap entre situaciones",
x = "Situación", y = "Valor de overlap")
ggplot(overlap_long, aes(x = situation, y = overlap_value)) +
geom_boxplot() +
theme_minimal() +
labs(title = "Comparación de los valores de overlap entre situaciones",
x = "Situación", y = "Valor de overlap")
ggplot(overlap_long, aes(x = situation, y = overlap_value, group = sp, color = sp)) +
geom_boxplot() +
facet_wrap(~ sp) +
theme_minimal() +
labs(title = "Comparación de overlap por especie",
x = "Situación", y = "Valor de overlap")
# Crear el dataframe con los datos proporcionados
overlap_data <- data.frame(
sp = c("1Aaxi", "1Mgou", "2Ctho", "2Lgym", "3Dnov", "3Dsep", "4Lgeo", "4Lwie"),
overlap_n_tech_Dhat = c(0.865, 0.872, 0.845, 0.847, 0.931, NA, 0.720, 0.831),
overlap_tr_cfam_Dhat = c(0.876, 0.844, 0.875, 0.862, 0.852, 0.715, 0.839, NA),
overlap_tr_btau_Dhat = c(0.809, 0.797, 0.867, 0.856, 0.916, 0.801, 0.716, 0.756)
)
# Mostrar el dataframe
print(overlap_data)
library(ggplot2)
overlap_long <- reshape2::melt(overlap_data, id.vars = "sp",
variable.name = "situation",
value.name = "overlap_value")
ggplot(overlap_long, aes(x = situation, y = overlap_value, group = sp, color = sp)) +
geom_boxplot() +
facet_wrap(~ sp) +
theme_minimal() +
labs(title = "Comparación de overlap por especie",
x = "Situación", y = "Valor de overlap")
ggplot(overlap_long, aes(x = situation, y = overlap_value, group = sp, color = sp)) +
geom_boxplot()
ggplot(overlap_long, aes(x = SP, y = overlap_value, group = situation, color = situation)) +
geom_boxplot()
ggplot(overlap_long, aes(x = sp, y = overlap_value, group = situation, color = situation)) +
geom_boxplot()
ggplot(overlap_long, aes(y = overlap_value, group = situation, color = situation)) +
geom_boxplot()
View(overlap_long)
View(overlap_data)
combined_plot
plots
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(activity)
library(overlap)
library(purrr)
library(ggplot2)
library(glue)
library(gridExtra)
library(grid)
library(patchwork)
load("datos_procesados_v4.RData")
data <- data %>% filter(sp %in% c("Ctho", "Lgym", "Lgeo", "Lwie", "Dnov", "Dsep", "Aaxi", "Mgou"))
# Función para categorizar las variable y calcular las densidades
calculate_density <- function(data, var_name) {
# Definir el punto de corte para las categorías
half_value  <- max(data[[var_name]]) / 2
# Crear una nueva columna para la categoría
data <- data %>%
mutate(cat = case_when(
!!sym(var_name) == 0 ~ "0",
!!sym(var_name) > 0 ~ "1",
))
# Extraer las horas solares para cada categoría
dat_0 <- data %>% filter(cat == "0") %>% pull(solar)
dat_above_0 <- data %>% filter(cat == "1") %>% pull(solar)
# Ajuste de la densidad para cada conjunto de datos, sólo si hay suficientes datos
act_0 <- if(length(dat_0) > 1) fitact(dat_0) else NULL
act_above_0 <- if(length(dat_above_0) > 1) fitact(dat_above_0) else NULL
# Función para extraer pdf si es válido
extract_pdf <- function(act_obj, category) {
if (!is.null(act_obj) && inherits(act_obj@pdf, "matrix")) {
data.frame(
angle = act_obj@pdf[, "x"],
density = act_obj@pdf[, "y"],
category = category
)
} else {
data.frame(
angle = numeric(0),
density = numeric(0),
category = character(0)
)
}
}
# Extraer los pdf para cada categoría
density_data_0 <- extract_pdf(act_0, "0")
density_data_above_0 <- extract_pdf(act_above_0, "1")
# Combinar los dataframes de densidad en uno solo
density_data <- bind_rows(density_data_0, density_data_above_0)
# Devolver tanto la tabla de densidad como la tabla original con la categoría
return(list(
density_data = density_data,
categorized_data = data %>% select(!!sym(var_name), cat)
))
}
# Generalización para todas las especies y variables
generalized_density_data <- data %>%
group_by(sp) %>%
nest() %>%
mutate(
density_tr_btau_sys = map(data, ~ calculate_density(.x, "tr_btau_sys")),
density_n_tech_sys = map(data, ~ calculate_density(.x, "n_tech_sys")),
density_tr_cfam_sys = map(data, ~ calculate_density(.x, "tr_cfam_sys"))
)
# Función para crear el gráfico
create_plot <- function(data, title, subtitle) {
ggplot(data[[1]], aes(x = angle)) +
geom_line(aes(y = density, color = category), size = 1) +
scale_x_continuous(breaks = c(0, pi/2, pi, 3*pi/2, 2*pi),
labels = c("00", "06", "12", "18", "24")) +
labs(title = title, subtitle = subtitle,
x = "Solar Time", y = "Density") +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.position = "top") +
scale_color_manual(values=c("#CC6666", "#9999CC"))
}
# Lista para almacenar los gráficos combinados
plots <- list()
for (sp in 1:nrow(generalized_density_data)) {
# Datos y títulos
datasets <- list(
list(generalized_density_data$density_tr_cfam_sys[[sp]],
"Estresor: Perros domésticos"),
list(generalized_density_data$density_tr_btau_sys[[sp]],
"Estresor: Ganado vacuno"),
list(generalized_density_data$density_n_tech_sys[[sp]],
"Estresor: Densidad humana")
)
# Generar los gráficos individuales
individual_plots <- lapply(datasets, function(data) {
n_registros <- data[[1]][[2]] %>%
group_by(cat) %>%
summarise(n = n()) %>%
mutate(text = glue("{cat}={n}")) %>%
pull(text) %>%
paste(collapse = ", ") %>%
paste("n: ", .)
create_plot(data[[1]], data[[2]], n_registros)
})
individual_plots
# Combinar los gráficos en un solo gráfico con 3 columnas
combined_plot <- wrap_plots(individual_plots, ncol = 3) +
plot_annotation(title = generalized_density_data[[1]][sp],
theme = theme(plot.title = element_text(size = 16, face = "bold"))) + plot_layout(axes = "collect")
# Almacenar el gráfico combinado en la lista
plots[[length(plots) + 1]] <- combined_plot
}
create_plot <- function(data, title, subtitle) {
ggplot(data[[1]], aes(x = angle)) +
geom_line(aes(y = density, color = category), size = 1) +
scale_x_continuous(breaks = c(0, pi/2, pi, 3*pi/2, 2*pi),
labels = c("00", "06", "12", "18", "24")) +
labs(title = title, subtitle = subtitle,
x = "Solar Time", y = "Density") +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.position = "top") +
scale_color_manual(values=c("#CC6666", "#9999CC"))
}
# Lista para almacenar los gráficos combinados
plots <- list()
for (sp in 1:nrow(generalized_density_data)) {
# Datos y títulos
datasets <- list(
list(generalized_density_data$density_tr_cfam_sys[[sp]],
"Estresor: Perros domésticos"),
list(generalized_density_data$density_tr_btau_sys[[sp]],
"Estresor: Ganado vacuno"),
list(generalized_density_data$density_n_tech_sys[[sp]],
"Estresor: Densidad humana")
)
# Generar los gráficos individuales
individual_plots <- lapply(datasets, function(data) {
n_registros <- data[[1]][[2]] %>%
group_by(cat) %>%
summarise(n = n()) %>%
mutate(text = glue("{cat}={n}")) %>%
pull(text) %>%
paste(collapse = ", ") %>%
paste("n: ", .)
create_plot(data[[1]], data[[2]], n_registros)
})
individual_plots
# Combinar los gráficos en un solo gráfico con 3 columnas
combined_plot <- wrap_plots(individual_plots, ncol = 3) +
plot_annotation(title = generalized_density_data[[1]][sp],
theme = theme(plot.title = element_text(size = 16, face = "bold"))) + plot_layout(axes = "collect")
# Almacenar el gráfico combinado en la lista
plots[[length(plots) + 1]] <- combined_plot
}
plots[[length(plots) + 1]]
plots
combined_plot
individual_plots
# Función para crear el gráfico
create_plot <- function(data, title, subtitle) {
ggplot(data[[1]], aes(x = angle)) +
geom_line(aes(y = density, color = category), size = 1) +
scale_x_continuous(breaks = c(0, pi/2, pi, 3*pi/2, 2*pi),
labels = c("00", "06", "12", "18", "24")) +
labs(title = title, subtitle = subtitle,
x = "Solar Time", y = "Density") +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.position = "top") +
scale_color_manual(values=c("#CC6666", "#9999CC"))
}
# Lista para almacenar los gráficos combinados
plots <- list()
for (sp in 1:nrow(generalized_density_data)) {
# Datos y títulos
datasets <- list(
list(generalized_density_data$density_tr_cfam_sys[[sp]],
"Estresor: Perros domésticos"),
list(generalized_density_data$density_tr_btau_sys[[sp]],
"Estresor: Ganado vacuno"),
list(generalized_density_data$density_n_tech_sys[[sp]],
"Estresor: Densidad humana")
)
# Generar los gráficos individuales
individual_plots <- lapply(datasets, function(data) {
n_registros <- data[[1]][[2]] %>%
group_by(cat) %>%
summarise(n = n()) %>%
mutate(text = glue("{cat}={n}")) %>%
pull(text) %>%
paste(collapse = ", ") %>%
paste("n: ", .)
create_plot(data[[1]], data[[2]], n_registros)
})
ggsave(filename = paste(sp, "_1", ".png"), plot =  individual_plots[[1]])
ggsave(filename = paste(sp, "_2", ".png"), plot =  individual_plots[[2]])
ggsave(filename = paste(sp, "_3", ".png"), plot =  individual_plots[[3]])
# Combinar los gráficos en un solo gráfico con 3 columnas
combined_plot <- wrap_plots(individual_plots, ncol = 3) +
plot_annotation(title = generalized_density_data[[1]][sp],
theme = theme(plot.title = element_text(size = 16, face = "bold"))) + plot_layout(axes = "collect")
# Almacenar el gráfico combinado en la lista
plots[[length(plots) + 1]] <- combined_plot
}
ggplot(data[[1]], aes(x = angle)) +
geom_line(aes(y = density, color = category), size = 1) +
scale_x_continuous(breaks = c(0, pi/2, pi, 3*pi/2, 2*pi),
labels = c("00", "06", "12", "18", "24")) +
labs(title = title, subtitle = subtitle,
x = "Solar Time", y = "Density") +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.position = "top") +
scale_color_manual(values=c("#CC6666", "#9999CC"))
data
data[[1]][[2]]
datasets
datasets
datasets[[1]][[2]]
datasets$data
datasets
View(datasets)
data[[1]]
datasets[[1]]
datasets[[1]]$data
View(datasets[[1]])
datasets[[1]][[2]]
generalized_density_data$density_tr_cfam_sys[[sp]]
generalized_density_data$density_tr_cfam_sys[[sp]]
View(generalized_density_data$density_tr_cfam_sys[[sp]])
generalized_density_data$density_tr_cfam_sys[[sp]][[1]][[2]]
a <- generalized_density_data$density_tr_cfam_sys[[sp]][[1]][[2]]
a[[1]]]
a[1]
generalized_density_data$density_tr_cfam_sys[[sp]][[1]]
a <- generalized_density_data$density_tr_cfam_sys[[sp]][[1]]
a %>% summarise(n = n()) %>%
mutate(text = glue("{cat}={n}")) %>%
pull(text) %>%
paste(collapse = ", ") %>%
paste("n: ", .)
# Función para crear el gráfico
create_plot <- function(data, title, subtitle) {
ggplot(data[[1]], aes(x = angle)) +
geom_line(aes(y = density, color = category), size = 1) +
scale_x_continuous(breaks = c(0, pi/2, pi, 3*pi/2, 2*pi),
labels = c("00", "06", "12", "18", "24")) +
labs(title = title, subtitle = subtitle,
x = "Solar Time", y = "Density") +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.position = "top") +
scale_color_manual(values=c("#CC6666", "#9999CC"))
}
# Lista para almacenar los gráficos combinados
plots <- list()
for (sp in 1:nrow(generalized_density_data)) {
# Datos y títulos
datasets <- list(
list(generalized_density_data$density_tr_cfam_sys[[sp]],
"Estresor: Perros domésticos"),
list(generalized_density_data$density_tr_btau_sys[[sp]],
"Estresor: Ganado vacuno"),
list(generalized_density_data$density_n_tech_sys[[sp]],
"Estresor: Densidad humana")
)
# Generar los gráficos individuales
individual_plots <- lapply(datasets, function(data) {
n_registros <- data[[1]][[2]] %>%
group_by(cat) %>%
summarise(n = n()) %>%
mutate(text = glue("{cat}={n}")) %>%
pull(text) %>%
paste(collapse = ", ") %>%
paste("n: ", .)
create_plot(data[[1]], data[[2]], n_registros)
})
#ggsave(filename = paste(sp, "_1", ".png"), plot =  individual_plots[[1]])
#ggsave(filename = paste(sp, "_2", ".png"), plot =  individual_plots[[2]])
#ggsave(filename = paste(sp, "_3", ".png"), plot =  individual_plots[[3]])
individual_plots[[1]]
# Combinar los gráficos en un solo gráfico con 3 columnas
#combined_plot <- wrap_plots(individual_plots, ncol = 3) +
#plot_annotation(title = generalized_density_data[[1]][sp],
#                 theme = theme(plot.title = element_text(size = 16, face = "bold"))) + plot_layout(axes = "collect")
# Almacenar el gráfico combinado en la lista
#plots[[length(plots) + 1]] <- combined_plot
}
individual_plots[[1]]
individual_plots[[1]]
individual_plots[[1]]
# Función para crear el gráfico
create_plot <- function(data, title, subtitle) {
ggplot(data[[1]], aes(x = angle)) +
geom_line(aes(y = density, color = category), size = 1) +
scale_x_continuous(breaks = c(0, pi/2, pi, 3*pi/2, 2*pi),
labels = c("00", "06", "12", "18", "24")) +
labs(title = title, subtitle = subtitle,
x = "Hora solar", y = "Densidad") +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.position = "top") +
scale_color_manual(values=c("#9999CC", "#CC6666"))
}
# Lista para almacenar los gráficos combinados
plots <- list()
for (sp in 1:nrow(generalized_density_data)) {
# Datos y títulos
datasets <- list(
list(generalized_density_data$density_tr_cfam_sys[[sp]],
"Estresor: Perros domésticos"),
list(generalized_density_data$density_tr_btau_sys[[sp]],
"Estresor: Ganado vacuno"),
list(generalized_density_data$density_n_tech_sys[[sp]],
"Estresor: Densidad humana")
)
# Generar los gráficos individuales
individual_plots <- lapply(datasets, function(data) {
n_registros <- data[[1]][[2]] %>%
group_by(cat) %>%
summarise(n = n()) %>%
mutate(text = glue("{cat}={n}")) %>%
pull(text) %>%
paste(collapse = ", ") %>%
paste("n: ", .)
create_plot(data[[1]], data[[2]], n_registros)
})
#ggsave(filename = paste(sp, "_1", ".png"), plot =  individual_plots[[1]])
#ggsave(filename = paste(sp, "_2", ".png"), plot =  individual_plots[[2]])
#ggsave(filename = paste(sp, "_3", ".png"), plot =  individual_plots[[3]])
# Combinar los gráficos en un solo gráfico con 3 columnas
#combined_plot <- wrap_plots(individual_plots, ncol = 3) +
#plot_annotation(title = generalized_density_data[[1]][sp],
#                 theme = theme(plot.title = element_text(size = 16, face = "bold"))) + plot_layout(axes = "collect")
# Almacenar el gráfico combinado en la lista
#plots[[length(plots) + 1]] <- combined_plot
}
ggsave(filename = paste(sp, "_1", ".png"), plot =  individual_plots[[1]])
ggsave(filename = paste("/plots/", sp, "_1", ".png"), plot =  individual_plots[[1]])
ggsave(filename = paste("./plots/", sp, "_1", ".png"), plot =  individual_plots[[1]])
ggsave(filename = paste("./plots/", generalized_density_data[[1]][sp], "_1", ".png"), plot =  individual_plots[[1]])
ggsave(filename = paste0("./plots/", generalized_density_data[[1]][sp], "_1", ".png"), plot =  individual_plots[[1]])
ggsave(filename = paste0("./plots/", generalized_density_data[[1]][sp], "_1", ".svg"), plot =  individual_plots[[1]])
