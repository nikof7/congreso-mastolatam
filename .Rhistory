library(tidyverse)
library(activity)
library(overlap)
library(purrr)
library(ggplot2)
library(glue)
library(gridExtra)
library(grid)
library(patchwork)
load("datos_procesados_v4.RData")
data <- data %>% filter(sp %in% c("Ctho"))
#, "Lgym", "Lgeo", "Lwie", "Dnov", "Dsep", "Aaxi", "Mgou"
# Función para categorizar las variable y calcular las densidades
calculate_density <- function(data, var_name) {
# Definir el punto de corte para las categorías
half_value  <- max(data[[var_name]]) / 2
# Crear una nueva columna para la categoría
data <- data %>%
mutate(cat = case_when(
!!sym(var_name) == 0 ~ "0",
!!sym(var_name) > 0 ~ "1",
))
# Extraer las horas solares para cada categoría
dat_0 <- data %>% filter(cat == "0") %>% pull(solar)
dat_above_0 <- data %>% filter(cat == "1") %>% pull(solar)
# Ajuste de la densidad para cada conjunto de datos, sólo si hay suficientes datos
act_0 <- if(length(dat_0) > 1) fitact(dat_0) else NULL
act_above_0 <- if(length(dat_above_0) > 1) fitact(dat_above_0) else NULL
# Función para extraer pdf si es válido
extract_pdf <- function(act_obj, category) {
if (!is.null(act_obj) && inherits(act_obj@pdf, "matrix")) {
data.frame(
angle = act_obj@pdf[, "x"],
density = act_obj@pdf[, "y"],
category = category
)
} else {
data.frame(
angle = numeric(0),
density = numeric(0),
category = character(0)
)
}
}
# Extraer los pdf para cada categoría
density_data_0 <- extract_pdf(act_0, "0")
density_data_above_0 <- extract_pdf(act_above_0, "1")
# Combinar los dataframes de densidad en uno solo
density_data <- bind_rows(density_data_0, density_data_above_0)
# Devolver tanto la tabla de densidad como la tabla original con la categoría
return(list(
density_data = density_data,
categorized_data = data %>% select(!!sym(var_name), cat)
))
}
# Generalización para todas las especies y variables
generalized_density_data <- data %>%
group_by(sp) %>%
nest() %>%
mutate(
density_tr_btau_sys = map(data, ~ calculate_density(.x, "tr_btau_sys")),
density_n_tech_sys = map(data, ~ calculate_density(.x, "n_tech_sys")),
density_tr_cfam_sys = map(data, ~ calculate_density(.x, "tr_cfam_sys"))
)
# Función para crear el gráfico
create_plot <- function(data, title, subtitle) {
ggplot(data[[1]], aes(x = angle)) +
geom_line(aes(y = density, color = category), size = 1) +
scale_x_continuous(breaks = c(0, pi/2, pi, 3*pi/2, 2*pi),
labels = c("00", "06", "12", "18", "24")) +
labs(title = title, subtitle = subtitle,
x = "Solar Time", y = "Density") +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.position = "top") +
scale_color_manual(values=c("#CC6666", "#9999CC"))
}
# Lista para almacenar los gráficos combinados
plots <- list()
for (sp in 1:nrow(generalized_density_data)) {
# Datos y títulos
datasets <- list(
list(generalized_density_data$density_tr_cfam_sys[[sp]],
"Estresor: Perros domésticos"),
list(generalized_density_data$density_tr_btau_sys[[sp]],
"Estresor: Ganado vacuno"),
list(generalized_density_data$density_n_tech_sys[[sp]],
"Estresor: Densidad humana")
)
# Generar los gráficos individuales
individual_plots <- lapply(datasets, function(data) {
n_registros <- data[[1]][[2]] %>%
group_by(cat) %>%
summarise(n = n()) %>%
mutate(text = glue("{cat}={n}")) %>%
pull(text) %>%
paste(collapse = ", ") %>%
paste("n: ", .)
create_plot(data[[1]], data[[2]], n_registros)
})
# Combinar los gráficos en un solo gráfico con 3 columnas
combined_plot <- wrap_plots(individual_plots, ncol = 3) +
plot_annotation(title = generalized_density_data[[1]][sp],
theme = theme(plot.title = element_text(size = 16, face = "bold"))) + plot_layout(axes = "collect")
# Almacenar el gráfico combinado en la lista
plots[[length(plots) + 1]] <- combined_plot
}
combined_plot
#pdf("combined_plots_2_categories.pdf", width = 20, height = 8)
for (i in seq_along(plots)) {
print(plots[[i]])
}
dev.off()
individual_plots
generalized_density_data
View(generalized_density_data)
View(generalized_density_data[[2]][[1]])
View(generalized_density_data[[3]][[1]])
generalized_density_data[[3]][[1]][["density_data"]][["density"]]
clear
generalized_density_data
generalized_density_data
sp_name <- "Ctho"
data <- generalized_density_data %>%
filter(sp == sp_name)
data
data %>% select(density_tr_btau_sys)
data <- generalized_density_data %>%
filter(sp == sp_name) %>%
ungroup()
data %>% select(density_tr_btau_sys)
data %>% select(density_tr_btau_sys) %>%
pull()
data %>% select(density_tr_btau_sys) %>%
pull() %>%
.$density_data
data %>% select(density_tr_btau_sys) %>%
pull() %>%
[[.]]$density_data
data %>% select(density_tr_btau_sys) %>%
pull() %>%
[[.]]
data %>% select(density_tr_btau_sys) %>%
pull()
dat <- data %>% select(density_tr_btau_sys) %>%
pull()
dat
dat[[1]]
dat[[2]]
dat[[0]]
dat[[1]]$density_data
dat <- data %>% select(density_tr_btau_sys) %>%
pull() %>%
.[[1]]$density_data
data %>% select(density_tr_btau_sys) %>%
pull() %>%
.[[1]]$density_data
data %>% select(density_tr_btau_sys) %>%
pull() %>%
.[[1]]$density_data
dat <- data %>% select(density_tr_btau_sys) %>%
pull()
dat[[1]]$density_data
dat[[1]]$density_data
cat0 <- dat[[1]]$density_data %>%
filter(category == "0")
cat0
cat1 <- dat[[1]]$density_data %>%
filter(category == "1")
sp_name <- "Ctho"
data <- generalized_density_data %>%
filter(sp == sp_name) %>%
ungroup() %>% select(density_tr_btau_sys) %>%
pull()
cat0 <- data[[1]]$density_data %>%
filter(category == "0")
cat1 <- data[[1]]$density_data %>%
filter(category == "1")
overlap(cat0, cat1)
overlapEst(cat0, cat1)
cat1
sp_name <- "Ctho"
data <- generalized_density_data %>%
filter(sp == sp_name) %>%
ungroup() %>% select(density_tr_btau_sys) %>%
pull()
cat0 <- data[[1]]$density_data %>%
filter(category == "0") %>%
select(-category)
cat1 <- data[[1]]$density_data %>%
filter(category == "1") %>%
select(-category)
overlapEst(cat0, cat1)
cat0
overlapEst(cat0$density, cat1$density)
sp_name <- "Ctho"
data <- generalized_density_data %>%
filter(sp == sp_name) %>%
ungroup() %>% select(density_tr_btau_sys) %>%
pull()
cat0 <- data[[1]]$density_data %>%
filter(category == "0")
cat1 <- data[[1]]$density_data %>%
filter(category == "1")
overlapEst(cat0$density, cat1$density)
load("datos_procesados_v4.RData")
data <- data %>% filter(sp %in% c("Ctho"))
#, "Lgym", "Lgeo", "Lwie", "Dnov", "Dsep", "Aaxi", "Mgou"
load("datos_procesados_v4.RData")
data <- data %>% filter(sp %in% c("Ctho", "Lgym", "Lgeo", "Lwie", "Dnov", "Dsep", "Aaxi", "Mgou"))
# Función para categorizar las variable y calcular las densidades
calculate_density <- function(data, var_name) {
# Definir el punto de corte para las categorías
half_value  <- max(data[[var_name]]) / 2
# Crear una nueva columna para la categoría
data <- data %>%
mutate(cat = case_when(
!!sym(var_name) == 0 ~ "0",
!!sym(var_name) > 0 ~ "1",
))
# Extraer las horas solares para cada categoría
dat_0 <- data %>% filter(cat == "0") %>% pull(solar)
dat_above_0 <- data %>% filter(cat == "1") %>% pull(solar)
# Ajuste de la densidad para cada conjunto de datos, sólo si hay suficientes datos
act_0 <- if(length(dat_0) > 1) fitact(dat_0) else NULL
act_above_0 <- if(length(dat_above_0) > 1) fitact(dat_above_0) else NULL
# Función para extraer pdf si es válido
extract_pdf <- function(act_obj, category) {
if (!is.null(act_obj) && inherits(act_obj@pdf, "matrix")) {
data.frame(
angle = act_obj@pdf[, "x"],
density = act_obj@pdf[, "y"],
category = category
)
} else {
data.frame(
angle = numeric(0),
density = numeric(0),
category = character(0)
)
}
}
# Extraer los pdf para cada categoría
density_data_0 <- extract_pdf(act_0, "0")
density_data_above_0 <- extract_pdf(act_above_0, "1")
# Combinar los dataframes de densidad en uno solo
density_data <- bind_rows(density_data_0, density_data_above_0)
# Devolver tanto la tabla de densidad como la tabla original con la categoría
return(list(
density_data = density_data,
categorized_data = data %>% select(!!sym(var_name), cat)
))
}
# Generalización para todas las especies y variables
generalized_density_data <- data %>%
group_by(sp) %>%
nest() %>%
mutate(
density_tr_btau_sys = map(data, ~ calculate_density(.x, "tr_btau_sys")),
density_n_tech_sys = map(data, ~ calculate_density(.x, "n_tech_sys")),
density_tr_cfam_sys = map(data, ~ calculate_density(.x, "tr_cfam_sys"))
)
# Función para crear el gráfico
create_plot <- function(data, title, subtitle) {
ggplot(data[[1]], aes(x = angle)) +
geom_line(aes(y = density, color = category), size = 1) +
scale_x_continuous(breaks = c(0, pi/2, pi, 3*pi/2, 2*pi),
labels = c("00", "06", "12", "18", "24")) +
labs(title = title, subtitle = subtitle,
x = "Solar Time", y = "Density") +
theme_minimal() +
theme(panel.grid.minor = element_blank(),
legend.title = element_blank(),
legend.position = "top") +
scale_color_manual(values=c("#CC6666", "#9999CC"))
}
# Lista para almacenar los gráficos combinados
plots <- list()
for (sp in 1:nrow(generalized_density_data)) {
# Datos y títulos
datasets <- list(
list(generalized_density_data$density_tr_cfam_sys[[sp]],
"Estresor: Perros domésticos"),
list(generalized_density_data$density_tr_btau_sys[[sp]],
"Estresor: Ganado vacuno"),
list(generalized_density_data$density_n_tech_sys[[sp]],
"Estresor: Densidad humana")
)
# Generar los gráficos individuales
individual_plots <- lapply(datasets, function(data) {
n_registros <- data[[1]][[2]] %>%
group_by(cat) %>%
summarise(n = n()) %>%
mutate(text = glue("{cat}={n}")) %>%
pull(text) %>%
paste(collapse = ", ") %>%
paste("n: ", .)
create_plot(data[[1]], data[[2]], n_registros)
})
# Combinar los gráficos en un solo gráfico con 3 columnas
combined_plot <- wrap_plots(individual_plots, ncol = 3) +
plot_annotation(title = generalized_density_data[[1]][sp],
theme = theme(plot.title = element_text(size = 16, face = "bold"))) + plot_layout(axes = "collect")
# Almacenar el gráfico combinado en la lista
plots[[length(plots) + 1]] <- combined_plot
}
#pdf("combined_plots_2_categories.pdf", width = 20, height = 8)
for (i in seq_along(plots)) {
print(plots[[i]])
}
dev.off()
sp_name <- "Ctho"
data <- generalized_density_data %>%
filter(sp == sp_name) %>%
ungroup() %>% select(density_tr_btau_sys) %>%
pull()
cat0 <- data[[1]]$density_data %>%
filter(category == "0")
cat1 <- data[[1]]$density_data %>%
filter(category == "1")
overlapEst(cat0$density, cat1$density)
generalized_density_data
density_columns <- c("density_tr_btau_sys", "density_tr_cfam_sys", "density_n_tech_sys")
# Crear un dataframe para almacenar los resultados
results <- data.frame(sp = character(), column = character(), overlap = numeric(), stringsAsFactors = FALSE)
# Iterar sobre cada especie y cada columna
generalized_density_data %>%
distinct(sp) %>%
pull(sp) %>%
walk(function(sp_name) {
# Iterar sobre cada columna de densidad
map(density_columns, function(col) {
# Filtrar los datos para la especie y la columna actual
data <- generalized_density_data %>%
filter(sp == sp_name) %>%
ungroup() %>%
select(all_of(col)) %>%
pull()
# Obtener las categorías 0 y 1
cat0 <- data[[1]]$density_data %>% filter(category == "0")
cat1 <- data[[1]]$density_data %>% filter(category == "1")
# Calcular overlapEst
overlap_value <- overlapEst(cat0$density, cat1$density)
# Almacenar el resultado
results <<- rbind(results, data.frame(sp = sp_name, column = col, overlap = overlap_value))
})
})
# Mostrar los resultados
print(results)
overlap_value
density_columns <- c("density_tr_btau_sys", "density_tr_cfam_sys", "density_n_tech_sys")
# Crear un dataframe para almacenar los resultados
results <- data.frame(sp = character(), column = character(), overlap = numeric(), stringsAsFactors = FALSE)
library(dplyr)
library(purrr)
# Lista de columnas para calcular overlapEst
density_columns <- c("density_tr_btau_sys", "density_tr_cfam_sys", "density_n_tech_sys")
# Crear un dataframe para almacenar los resultados
results <- data.frame(sp = character(),
column = character(),
dhat_0 = numeric(),
dhat_1 = numeric(),
dhat_2 = numeric(),
stringsAsFactors = FALSE)
# Iterar sobre cada especie y cada columna
generalized_density_data %>%
distinct(sp) %>%
pull(sp) %>%
walk(function(sp_name) {
# Iterar sobre cada columna de densidad
map(density_columns, function(col) {
# Filtrar los datos para la especie y la columna actual
data <- generalized_density_data %>%
filter(sp == sp_name) %>%
ungroup() %>%
select(all_of(col)) %>%
pull()
# Obtener las categorías 0 y 1
cat0 <- data[[1]]$density_data %>% filter(category == "0")
cat1 <- data[[1]]$density_data %>% filter(category == "1")
# Calcular overlapEst
overlap_value <- overlapEst(cat0$density, cat1$density)
# Almacenar el resultado
results <<- rbind(results, data.frame(sp = sp_name,
column = col,
dhat_0 = overlap_value[1],
dhat_1 = overlap_value[2],
dhat_2 = overlap_value[3]))
})
})
# Mostrar los resultados
print(results)
# Mostrar los resultados
print(results)
library(dplyr)
library(purrr)
# Lista de columnas para calcular overlapEst
density_columns <- c("density_tr_btau_sys", "density_tr_cfam_sys", "density_n_tech_sys")
# Crear un dataframe para almacenar los resultados
results <- data.frame(sp = character(),
dhat_0 = numeric(),
dhat_1 = numeric(),
dhat_2 = numeric(),
stringsAsFactors = FALSE)
# Iterar sobre cada especie y cada columna
generalized_density_data %>%
distinct(sp) %>%
pull(sp) %>%
walk(function(sp_name) {
# Iterar sobre cada columna de densidad
map(density_columns, function(col) {
# Filtrar los datos para la especie y la columna actual
data <- generalized_density_data %>%
filter(sp == sp_name) %>%
ungroup() %>%
select(all_of(col)) %>%
pull()
# Obtener las categorías 0 y 1
cat0 <- data[[1]]$density_data %>% filter(category == "0")
cat1 <- data[[1]]$density_data %>% filter(category == "1")
# Calcular overlapEst
overlap_value <- overlapEst(cat0$density, cat1$density)
# Almacenar el resultado
results <<- rbind(results, data.frame(sp = sp_name,
column = col,
dhat_0 = overlap_value[1],
dhat_1 = overlap_value[2],
dhat_2 = overlap_value[3]))
})
})
# Mostrar los resultados
print(results)
View(generalized_density_data)
View(generalized_density_data[[3]][[2]])
generalized_density_data[[3]][[2]][["density_data"]][["density"]]
# Crear un dataframe para almacenar los resultados
results <- data.frame(sp = character(),
dhat_0 = double(),
dhat_1 = numeric(),
dhat_2 = numeric(),
stringsAsFactors = FALSE)
library(dplyr)
library(purrr)
# Lista de columnas para calcular overlapEst
density_columns <- c("density_tr_btau_sys", "density_tr_cfam_sys", "density_n_tech_sys")
# Crear un dataframe para almacenar los resultados
results <- data.frame(sp = character(),
dhat_0 = double(),
dhat_1 = double(),
dhat_2 = double(),
stringsAsFactors = FALSE)
# Iterar sobre cada especie y cada columna
generalized_density_data %>%
distinct(sp) %>%
pull(sp) %>%
walk(function(sp_name) {
# Iterar sobre cada columna de densidad
map(density_columns, function(col) {
# Filtrar los datos para la especie y la columna actual
data <- generalized_density_data %>%
filter(sp == sp_name) %>%
ungroup() %>%
select(all_of(col)) %>%
pull()
# Obtener las categorías 0 y 1
cat0 <- data[[1]]$density_data %>% filter(category == "0")
cat1 <- data[[1]]$density_data %>% filter(category == "1")
# Calcular overlapEst
overlap_value <- overlapEst(cat0$density, cat1$density)
# Almacenar el resultado
results <<- rbind(results, data.frame(sp = sp_name,
column = col,
dhat_0 = overlap_value[1],
dhat_1 = overlap_value[2],
dhat_2 = overlap_value[3]))
})
})
# Mostrar los resultados
print(results)
sp_name <- "Mgou"
data <- generalized_density_data %>%
filter(sp == sp_name) %>%
ungroup() %>% select(density_tr_btau_sys) %>%
pull()
cat0 <- data[[1]]$density_data %>%
filter(category == "0")
cat1 <- data[[1]]$density_data %>%
filter(category == "1")
overlapEst(cat0$density, cat1$density)
generalized_density_data %>%
filter(sp == sp_name)
generalized_density_data %>%
filter(sp == sp_name) %>%
ungroup() %>% select(density_tr_btau_sys)
generalized_density_data %>%
filter(sp == sp_name) %>%
ungroup() %>% select(density_tr_btau_sys) %>%
pull()
cat0
cat1
overlapEst(cat0$density, cat1$density)
overlapEst(cat0$density, cat1$density, type = "all")
overlapEst(cat0$density, cat1$density, type = "Dhat4")
overlapEst(cat0$density, cat1$density, type=c("all", "Dhat1", "Dhat4", "Dhat5"))
overlapEst(cat0$density, cat1$density, adjust=c(0.8, 1, 4), n.grid = 128, type=c("all", "Dhat1", "Dhat4", "Dhat5"))
overlapEst(cat0$density, cat1$density,  kmax = 3, adjust=c(0.8, 1, 4), n.grid = 128, type=c("all", "Dhat1", "Dhat4", "Dhat5"))
overlapEst(cat0$density, cat1$density,  kmax = 3)
overlapEst(cat0$density, cat1$density)
plot(cat0$density, cat1$density)
overlapEst(cat1$density, cat0$density)
overlapEst(cat0$density, cat1$density)
