
```{r}
load("datos_procesados_v4.RData")
```


```{r}
data_categorized <- data %>% 
  mutate(cat_n_tech_sys = case_when(
    n_tech_sys == 0 ~ "0",
    n_tech_sys > 0 ~ "1"
  ),
  cat_tr_cfam_sys = case_when(
    tr_cfam_sys == 0 ~ "0",
    tr_cfam_sys > 0 ~ "1"
  ),
  cat_tr_btau_sys = case_when(
    tr_btau_sys == 0 ~ "0",
    tr_btau_sys > 0 ~ "1"
  )
  ) %>% 
  select(site, system, camera, solar, sp, cat_n_tech_sys, cat_tr_cfam_sys,cat_tr_btau_sys)
```


```{r}
# Lista de columnas para calcular overlapEst
categories <- c("cat_n_tech_sys", "cat_tr_cfam_sys", "cat_tr_btau_sys")

# Crear un dataframe para almacenar los resultados
results <- data.frame(sp = character(), 
                       dhat_0 = double(), 
                       dhat_1 = double(), 
                       dhat_2 = double(), 
                       stringsAsFactors = FALSE)

# Iterar sobre cada especie y cada columna
data_categorized %>%
  distinct(sp) %>%
  pull(sp) %>%
  walk(function(sp_name) {
    # Iterar sobre cada columna de densidad
    map(categories, function(col) {
      # Filtrar los datos para la especie y la columna actual
      data <- data_categorized %>%
        filter(sp == sp_name) %>%
        select(all_of(col)) %>%
        pull()

      # Obtener las categor√≠as 0 y 1
      cat0 <- data[[1]]$density_data %>% filter(category == "0")
      cat1 <- data[[1]]$density_data %>% filter(category == "1")

      # Calcular overlapEst
      overlap_value <- overlapEst(cat0$density, cat1$density)

      # Almacenar el resultado
      results <<- rbind(results, data.frame(sp = sp_name, 
                                             column = col, 
                                             dhat_0 = overlap_value[1], 
                                             dhat_1 = overlap_value[2], 
                                             dhat_2 = overlap_value[3]))
    })
  })

# Mostrar los resultados
print(results)
```

